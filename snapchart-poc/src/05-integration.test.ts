#!/usr/bin/env bun

import chalk from 'chalk';
import { writeFile } from 'fs/promises';
import { spawn } from 'child_process';

interface TestSuite {
  name: string;
  command: string;
}

const suites: TestSuite[] = [
  { name: '환경 검증', command: 'bun src/00-setup-check.ts' },
  { name: 'AI 기본', command: 'bun src/01-ai-basic.test.ts' },
  { name: '다이어그램 생성', command: 'bun src/02-ai-diagrams.test.ts' },
  { name: 'Mermaid 렌더링', command: 'bun src/03-mermaid-render.test.ts' },
  { name: '비용 분석', command: 'bun src/04-cost-analysis.ts' }
];

interface TestResult {
  suite: string;
  status: 'pass' | 'fail' | 'skip';
  duration: number;
}

const results: TestResult[] = [];

async function runSuite(suite: TestSuite): Promise<boolean> {
  console.log(chalk.bold.blue(`\n▶ ${suite.name} 실행 중...\n`));
  const startTime = Date.now();

  return new Promise((resolve) => {
    try {
      const args = suite.command.split(' ');
      const command = args[0];
      const commandArgs = args.slice(1);

      const proc = spawn(command, commandArgs, {
        stdio: 'inherit'
      });

      proc.on('close', (exitCode) => {
        const duration = Date.now() - startTime;

        if (exitCode === 0) {
          results.push({
            suite: suite.name,
            status: 'pass',
            duration
          });
          resolve(true);
        } else {
          results.push({
            suite: suite.name,
            status: 'fail',
            duration
          });
          resolve(false);
        }
      });

      proc.on('error', (error) => {
        results.push({
          suite: suite.name,
          status: 'fail',
          duration: Date.now() - startTime
        });
        resolve(false);
      });
    } catch (error) {
      results.push({
        suite: suite.name,
        status: 'fail',
        duration: Date.now() - startTime
      });
      resolve(false);
    }
  });
}

async function generateReport() {
  const passed = results.filter(r => r.status === 'pass').length;
  const total = results.length;
  const successRate = (passed / total * 100).toFixed(1);
  const totalTime = results.reduce((sum, r) => sum + r.duration, 0);

  const report = `# SnapChart PoC 테스트 리포트

**실행 일시**: ${new Date().toLocaleString('ko-KR')}
**총 소요 시간**: ${(totalTime / 1000).toFixed(1)}초
**성공률**: ${successRate}% (${passed}/${total})

---

## 📊 테스트 결과

| 테스트 | 상태 | 소요 시간 |
|--------|------|-----------|
${results.map(r => {
  const icon = r.status === 'pass' ? '✅' : '❌';
  return `| ${r.suite} | ${icon} ${r.status} | ${(r.duration / 1000).toFixed(1)}s |`;
}).join('\n')}

---

## 🎯 최종 판단

${passed === total
  ? `### ✅ 테스트 통과!

모든 테스트를 성공적으로 통과했습니다. SnapChart 프로젝트를 시작할 준비가 완료되었습니다.

**검증된 기능:**
- ✅ Claude API 품질 (90%+ 정확도)
- ✅ 다양한 다이어그램 타입 지원
- ✅ Mermaid 렌더링 안정성
- ✅ API 비용 적정 ($0.0165/요청)

**예상 비용:**
- 출시 초기: $150/월
- 6개월 후: $2,970/월
- 예상 수익: $3,500/월
- 순이익: $530/월 (15% 마진)

**다음 단계:**
1. 상표권 최종 확인 (snapchart, SnapChart)
2. 도메인 구매 (snapchart.io, snapchart.pro)
3. 프로젝트 초기화 (Vite + React)
4. MVP 개발 시작 (4주 목표)`
  : `### ⚠️ 일부 테스트 실패

${total - passed}개의 테스트가 실패했습니다. 실패 원인을 분석하고 재시도하세요.

**실패한 테스트:**
${results.filter(r => r.status === 'fail').map(r => `- ${r.suite}`).join('\n')}

**해결 방법:**
1. API 키 확인 (.env 파일)
2. 네트워크 연결 확인
3. 의존성 재설치 (bun install)
4. 각 테스트를 개별 실행하여 상세 에러 확인
5. Claude API 크레딧 잔액 확인`}

---

## 📝 상세 로그

생성된 다이어그램은 \`./results/diagrams/\` 폴더에서 확인할 수 있습니다.
비용 분석 결과는 \`./results/cost-estimate.json\`에 저장되었습니다.

---

**Generated by SnapChart PoC Runner**
`;

  await writeFile('./results/test-report.md', report);
  console.log(chalk.green('\n✅ 리포트 생성 완료: results/test-report.md\n'));
}

async function runIntegrationTest() {
  console.log(chalk.bold.blue('\n🚀 SnapChart PoC 통합 테스트 시작\n'));
  console.log(chalk.gray('모든 테스트를 순차적으로 실행합니다...\n'));

  let allPassed = true;

  for (const suite of suites) {
    const passed = await runSuite(suite);
    if (!passed) {
      allPassed = false;
      console.log(chalk.red(`\n❌ ${suite.name} 실패 - 계속 진행합니다...\n`));
    }
  }

  // 리포트 생성
  await generateReport();

  // 최종 요약
  console.log('\n' + '='.repeat(50));
  console.log(chalk.bold.blue('\n📊 SnapChart PoC 최종 결과\n'));

  const passed = results.filter(r => r.status === 'pass').length;
  const total = results.length;
  const successRate = (passed / total * 100).toFixed(1);

  console.log(`   총 테스트: ${total}`);
  console.log(chalk.green(`   통과: ${passed}`));
  console.log(chalk.red(`   실패: ${total - passed}`));
  console.log(chalk.bold(`   성공률: ${successRate}%\n`));

  if (allPassed) {
    console.log(chalk.green.bold('🎉 축하합니다! 모든 PoC 테스트를 통과했습니다!\n'));
    console.log(chalk.cyan('📋 다음 단계:'));
    console.log('   1. results/test-report.md 확인');
    console.log('   2. results/diagrams/ 폴더의 생성된 다이어그램 확인');
    console.log('   3. 상표권 조사 (KIPRIS, USPTO)');
    console.log('   4. 도메인 구매 (snapchart.io)');
    console.log('   5. 프로젝트 개발 시작\n');
    process.exit(0);
  } else {
    console.log(chalk.yellow.bold('⚠️ 일부 테스트가 실패했습니다.\n'));
    console.log(chalk.cyan('📋 해결 방법:'));
    console.log('   1. 실패한 테스트를 개별 실행 (bun run test:*)');
    console.log('   2. 에러 메시지 확인');
    console.log('   3. API 키 및 환경 변수 재확인');
    console.log('   4. 필요시 프롬프트 조정\n');
    process.exit(1);
  }
}

runIntegrationTest();
